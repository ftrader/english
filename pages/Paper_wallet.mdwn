[[!img "FirstBitcoinBills.jpg" size=120x120 class="right" size=200x200 title="Casascius holding early paper ECDSA private keys"]]
A **paper ECDSA private key** is a mechanism for storing bitcoins offline as a physical document that can be secured like cash or anything else of real-world value.
They are generally created by printing a brand new public address and private key onto paper, and then sending bitcoins from a wallet to the printed key's public address for safekeeping.
Storing bitcoins this way is generally considered a bad idea.[[!template id=why]]

__TOC__

##Producing safe paper keys

[[!img "BitcoinPaperWallet-sample.jpg" size=120x120 class="right" size=300x300 title="Paper keypair with private key secured beneath folds"]]
[[!img "PaperWallets-offlineaddress-com.png" size=200x200 size=120x120 class="right" title="Paper keypair"]]
An [[ECDSA]] [[private_key]] can be represented in several formats, but typically the Wallet Import Format (WIF) is used, since keys represented that way are very short (51 characters) and thus easy to re-enter when importing or "sweeping" it for withdrawal.

Several tools exist for producing paper keypairs, including [[Bitcoin_Address_Utility]], [[vanitygen]], and [[Cwallet]]. 

Care must be taken to securely generate keys since an attacker can steal stored bitcoins if it is exposed, transmitted, or generated with insufficient entropy.

Some websites feature a free open-source client-side paper keypair generators written in JavaScript.
Using these is generally considered a bad idea and inherently insecure.

**Recommendations:**

* Keys should be produced on a computer not connected to the Internet.
* Be aware that malware often allows a remote third party to view your screen and see your keystrokes, and these can compromise the integrity of your key.  Also consider that antivirus software cannot completely rule out the possibility of malware.  However, booting from a [live disc](https://en.wikipedia.org/wiki/Live_CD) prevents most malware from running.
* The private keys should never be saved to a computer hard drive.  You should also never scan your key into your computer or type them or save them in e-mail, except at the moment you are redeeming it.
* If possible, the private key should be kept hidden, for example by using BIP38 encryption, or by folding the paper to hide the private key so that a photograph or photocopy of it will not reveal or replicate the private key.
* A web-based generator should not be used.
* A generator should use an appropriate source of random numbers (entropy).  This means that the generated keys aren't predictable.  If the addresses come from a predictable or partially-predictable patterns like pseudorandom numbers  (2.1), someone else who can predict the pattern can steal the balance. Ideally, randomness should NOT be human generated.
* Remember that unlike wallets, a single ECDSA private key is only good to receive a single payment, and must be redeemed in its entirety.

###Printer Security

Some advanced printers have internal storage (even hard drives) that preserve copies of printouts. This is a risk if someone gets access to your printer, or if you dispose of your printer. There is also the possibility that a smart enough printer can be hacked. (Consider [StuxNet](http://en.wikipedia.org/wiki/Stuxnet) which was able to rewrite the firmware of non-computer devices indirectly connected to the Internet) If this concerns you, use a "dumb" printer, and never let your printer have access to the Internet or to an Internet-connected computer.

##Redeeming Keys and Withdrawing Funds

ECDSA private keys are very different from wallets such as Bitcoin Core in that it is not possible to transfer (withdraw) a *portion* of a key's bitcoins.
The only way to withdraw funds is to import or "sweep" the *entire* received amount to a new address, typically a wallet or online exchange.
Once the transfer has been confirmed, *the key should not be reused*. (4.1)

There are various methods for copying the private key data to other wallets.

* bitcoind supports an "importprivkey" RPC method for this purpose.
* Bitcoin-Qt's debug console can also be used in a similar way (see also [[how_to_import_private_keys_v7+]]).
* [[BlockChain.info]] and [[Armory]] can also import them directly into wallets.

Note that importing a private key that may be compromised can result in the entire wallet being insecure.
For this reason, sweeping is generally recommended over importing.

##References

2.1: [Pseudorandomness](https://en.wikipedia.org/wiki/Pseudorandomness#Cryptography)  '' is not enough for strong cryptography''  
4.1: [reddit.com](http://www.reddit.com/r/Bitcoin/comments/1c9xr7/psa_using_paper_wallets_understanding_change/)  ''Using Paper Wallets and Understanding Change''


##See Also

* [[Private_key]]

* [[Securing_your_wallet#Paper_Wallets]]

* [[How_to_import_private_keys]]

* [Blockchain.info tutorial](https://blockchain.info/wallet/paper-tutorial) on how to generate a paper wallet.

* [[Casascius_physical_bitcoins]]

[[!tag "Security"]]

[[es:Monedero de papel]]
