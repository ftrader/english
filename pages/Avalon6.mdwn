# Basic Information
	Hashrate:
	**3.5T (+-5%)**
	
	Power consumption:
	990W (measure on 12V port of the device)
	1100W (on the wall, with assumption of 90% power conversion ratio)
	
	Power per hash:
	270J/THash (device only)
	295J/THash (on the wall, with assumption of 90% power conversion
	ratio)
	
	Overclocking:
	Support automatically optimize frequency, no need to overclock manually.
	
	PSU output pin:
	4x6PIN PCIe power connector. *All must be connected.*
	
	PSU requirements:
	Minimum 1100W output, recommend to use high-quality PSU for server
	with more than 1200W output and high quality power cable.
	Input voltage no lower than 11.7V and no higher than 12.2V (numbers
	take from the controller)
	Lower voltage leads to lower hashrate and higher voltage leads to
	possible device burning down.
	NOTICE: Poor quality cable may result in low voltage.
	
	Fan:
	Specs: 12038
	Current: between 1.6A and 2.8A.
	Minimum RPM: 3800.
	*NOTICE* If the fan is broken or the fan's RPM cannot be measure,
	the device will not start.
	
	Controller:
	Raspberry Pi (version B or B+)
	Raspberry Pi 2 will be supported at the middle of December 2015
	Each Rpi can control approximately ~12 devices.
	
	AUC:
	Each AUC can connect up to 6 devices.
	
	Dimensions:
	354x136x150mm
	
	Net weight:
	~4.8kg
	
	Protection Degree:
	IP20

## Pictures
### Control board
  [[!img "AvalonMiner6_CTRL.png" title="none " size=640x640]]

* NC means not connect

## LED
### Avalon6 LED

|+ 
|LED Status|MEMO
|---|---
valign="top"|White|Power on
valign="top"|Blue|Working normally
valign="top"|Yellow blinking|Idle normally
valign="top"|Green blinking|Detect fan and mcu
valign="top"|White blinking|Turn on LED manually
valign="top"|Red blinking|Toohot/Loopback failed/PG failed/Coretest failed/Voltage error/Temperature sensor error/No fan


### AUC2 LED

|+ 
|LED Status|MEMO
|---|---
valign="top"|Blue|Initializing or Idle normally
valign="top"|Green|Working normally
valign="top"|Red|Communication failed


## MM Error Codes
**<span style="color:red"></span>[EC here](Query)**


|CODE|NAME|TYPE|MEMO|What to do
|---|---|---|---|---
valign="top"|1|CODE_IDLE|WARN|Idle|Check if the network is ok or AUC is work  normally
valign="top"|2|CODE_TOOHOT|FATAL|Too hot|Check if the fan is connect successfully
valign="top"|4|CODE_LOOP0FAILED|FATAL|Channel 0 loopback failed|Replace a new hash unit  for channel 0 if PG0 is ok
valign="top"|8|CODE_LOOP1FAILED|FATAL|Channel 1 loopback failed|Replace a new hash unit  for channel 1 if PG1 is ok
valign="top"|16|CODE_INVALIDMCU|FATAL|MCU cann't be detected|Replace a new CTRL board
valign="top"|32|CODE_NOSTRATUM|WARN|No stratum|Check if the network is ok or AUC is work  normally
valign="top"|64|CODE_RBOVERFLOW|WARN|Nonce ringbuffer overflow|Ignore it please, If CGMiner is restart, It will be ok. 
valign="top"|128|CODE_MMCRCFAILED|WARN|Ignore it please, If CGMiner is restart, It will be ok. |Find iic rx crc mismatch
valign="top"|256|CODE_MCUCRCFAILED|WARN|Find mcu rx irc mismatch|Ignore it please, If CGMiner is restart, It will be ok. 
valign="top"|512|CODE_NOFAN|FATAL|Fan cann't be found|Check the fan connection
valign="top"|1024|CODE_PG0FAILED|FATAL|Channel 0 power good failed|Check the PSU for channel 0
valign="top"|2048|CODE_PG1FAILED|FATAL|Channel 1 power good failed|Check the PSU for channel 1
valign="top"|4096|CODE_CORETESTFAILED|FATAL|Find bad chip on channel 0 or channel 1|Replace a new hash unit if hash rate is too low, or else you can ignore it.
valign="top"|8192|CODE_ADC0_ERR|FATAL|Temperature sensor cann't be detected on channel 0|Replace a new hash unit  for channel 0
valign="top"|16384|CODE_ADC1_ERR|FATAL|Temperature sensor cann't be detected on channel 1|Replace a new hash unit  for channel 1
valign="top"|32768|CODE_VOL_ERR|FATAL|MM is not permit to run at the voltage for safety|Change another PSU for the machine

TYPE meaning:
	**WARN**-It designates potentially harmful situations, but you can ignore it.
	**FATAL**-It designates very severe error events that will presumably lead the Avalon6 to crash.

# Firmware
## RPi Firmware
### [http://downloads.canaan-creative.com/software/avalon6/openwrt/20151225/ 20151225]

* OpenWrt:Update to 15.05
* OpenWrt:Support Raspberry Pi 2 Model B
* LuCI:Sync with for-15.05 branch (ab31abd244979d1ff234a15a4a3cf69ac1b73688)
* CGMiner:Sync with ckolivas's master (5a456afbfa028162060afd66636b7cb266b35a53)
* CGMiner:Add more options for smartspeed (Only support MM version >= 601512-xxxxxxxx)

### [http://downloads.canaan-creative.com/software/avalon6/openwrt/20151111/ 20151111]

* CGMiner:Fix divide by zero in Avalon4 driver
* CGMiner:Add stratum difficulty in pool api
* CGMiner:Update option for Avalon6
* CGMiner:Update Vol api display in Avalon4 driver for Avalon6
* CGMiner:Update fan adjust for Avalon6
* CGMiner:Update target temp settting for Avalon6
* LuCI:Update display information for Avalon6
* LuCI:Update device name for Avalon6
* LuCI:Update CGMiner configuration for Avalon6
* LuCI:Update CGMiner setting for Avalon theme

### [http://downloads.canaan-creative.com/software/avalon6/openwrt/20151031/ 20151031]

* Fix nonce counter for multiple miners
* Display ASIC counts as TA in CGMiner status
* Update maximum difficulty for Avalon4 and Avalon6
* Update temperature check for Avalon6
* Add GHSmm for hash rate comparison
* Display PLL information for Avalon6
* Turn on nonce check as default for Avalon6
* Correct on voltage decode
* Enable adjust frequency automatically as default for Avalon6
* Decode voltage and temperature decode for Avalon6
* Support err code for Avalon6

### [http://downloads.canaan-creative.com/software/avalon6/openwrt/20151001/ 20151001]

* First version of Avalon6 firmware

### [http://downloads.canaan-creative.com/software/avalon6/openwrt/nexttesting/ NEXT-TESTING]

* NOTICE: Only for testing
* Fix duplicate address
* Update GHS counter to fix the gap between miner and mm
* Add a new smart speed option (mode 3), and change it to default.
* Update mm count when scan hash

## MM Firmware
### [http://downloads.canaan-creative.com/software/avalon6/mm/2015-12-28/ 2015-12-28]

* Version **601512-57532250**
* Fix:Don't touch fan by miner when mm is too hot
* Fix:Update idle process with toohot detect, stratum detect, and invalid mcu protect
* Fix:Fix coretest failed cause by incorrect pll setting
* Update:Update API_TIMEOUT_CONST
* Add:Support adjust freq by CGMiner when mm is working

### [http://downloads.canaan-creative.com/software/avalon6/mm/2015-11-24/ 2015-11-24]

* Version **601511-f4f59c70**
* Update Core test check rules
* Update Input voltage check rules (Input voltage should not >= 12.8V)
* Fix result when run test scripts

### [http://downloads.canaan-creative.com/software/avalon6/mm/2015-11-11/ 2015-11-11]

* Version **601511-e3d244c0 **
* Add voltage range detect
* Check maximum rpm when detect fan polar
* Check temp for bad ntc resistor
* Check voltage when MM is starting
* Monitor powergood when power on
* Update temperature check
* Update nonce process
* Update frequency table
* Fix conflict address
* Enable 25MHz clock for debug purpose
* Disable pll when if miner is invalid when process FREQ_WORK

### [http://downloads.canaan-creative.com/software/avalon6/mm/2015-10-31/ 2015-10-31]

* Version **601510-afa837a0**
* Update IIC and UART communication
* Support core test by AVA4_P_TEST
* Update ASIC_FREQMIN to 100MHz
* Detect ASIC counts by LOOPBACK
* Fix upgrade failed caused by i2c FIFO overflow
* Update timer function
* Use GPIO led as address indicator
* Always disable the invalid miner when PG or LOOPBACK failed
* Add PLL status in P_STATUS_M
* Add err code
* Support ADC capture
* Keep free run if MCU can't be detected
* Update led status
* Rewrite boot loader with c code

### [http://downloads.canaan-creative.com/software/avalon6/mm/2015-09-30/ 2015-09-30]

* Version **601509-a2613610**
* First MM firmware for Avalon6.0 S 
* Support 2 miners
* Detect asic counts when start
* Support target filter

### [http://downloads.canaan-creative.com/software/avalon6/mm/nexttesting/ NEXT-TESTING]

* NOTICE: Only for testing
* Add mm package header verify
* Update pll couter for separate module
* Update iic address free mechanism
* Update fan rpm detect
* Fix duplicate address during detect
* Fix freq setting lost cause by mm was toohot

## MCU Firmware
### [http://downloads.canaan-creative.com/software/avalon6/mm/mcu/2015-10-31/ 2015-10-31]

* Version **6C1508-afa837a0**
* For adc and temperature capture use MM protocal

## AUC2 Firmware
### [http://downloads.canaan-creative.com/software/avalon6/auc2/2015-12-08 20151208]

* AUC version: **AUC-20151208**
* First release

### [http://downloads.canaan-creative.com/software/avalon6/auc2/NEXT-TESTING/ NEXT-TESTING]

* NOTICE: Only for testing

# Software Development
## Controller firmware
### [http://build.canaan-creative.com:8080/~buildbot/avalon6/ Daily building]
### CGMiner Under Ubuntu 14.04
	#Inside your home directory, download Cgminer
	git clone https://github.com/Canaan-Creative/cgminer
	cd cgminer
	git checkout origin/avalon4 -b avalon4
	./autogen.sh --enable-avalon4
	make -j 4
	# Run
	sudo ./cgminer --avalon4-freq 200 --avalon4-voltage 7125 -o http://stratum.pool:3333 -u  work -p pass 
	or
	sudo ./cgminer --avalon4-freq 200 --avalon4-voltage 7125 -o http://stratum.pool:3333 -u  work -p pass --api-allow W:192.168.2,W:192.168.2.1 --api-listen $@ 2>./log

### Frequency Statechart
	   [[!img "A6_frequency_state.png" size=640x640]]

## MM
### [http://build.canaan-creative.com:8080/~buildbot/mm60/ Daily building]
### Avalon6 TB2
	$ make -C firmware PLATFORM=MM60_TB2
### Avalon6.0 S
	$ make -C firmware

## AUC2
### [http://build.canaan-creative.com:8080/~buildbot/auc2/ Daily building]
### USB Bootloader
#### Support USB-DFU Mode
	We can use dfu-util under Ubuntu 14.04 or later updata new firmware for AUC2.

#### Using USB-DFU Protocol

|+<big><big>DFU Device Descriptor</big></big>OffsetFieldSizeValueDescripton
|0 |bLength |1 |12h |Size of this descriptor,in bytes.
|1 |bDescriptorType |1 |01h |DEVICE descriptor type.
|2 |bcdUSB |2 |0100h |USB specification release number in binary coded decimal.
|4 |bDeviceClass |1 |00h |See interface.
|5 |bDeviceSubClass |1 |00h |See interface
|6 |bDeviceProtocol |1 |00h |See interface.
|7 |bMaxPacketSize0 |1 |8,16,32,64 |Maximum packet size for endpoint.
|8 |idVendor |2 |ID |Vendor ID. Assigned by the USB-IF.
|10 |idProduct |2 |ID |Product ID. Assigned by manufacturer.
|12 |bcdDevice |2 |BCD |Device release number in binary coded decimal.
|14 |iManufacturer |1 |index |index of string descriptor.
|15 |iProduct |1 |index |index of string descriptor.
|16 |iSerialNumber |1 |index |index of string descriptor.
|17 |bNumConfigurations |1 |01h |One configuration only for DFU. 




|+<big><big>DFU Interface Descriptor</big></big>Offset Field Size Value Descripton
|0 |bLength |1 |09h |Size of this descriptor,in bytes.
|1 |bDescriptorType |1 |04h |INTERFACE descriptor type.
|2 |bInterfaceNumber |1 |Number |Number of this interface.
|3 |bAlternateSetting |1 |00h |Alternate setting. Must be zero.
|4 |bNumEndpoints |1 |00h |Only the control pipe is used.
|5 |bInterfaceClass |1 |FEh |Application Specific Class Code.
|6 |bInterfaceSubClass |1 |01h |Device Firmware Upgrade Code.
|7 |bInterfaceProtocol |1 |01h |Runtime protocol.
|8 |iInterface |1 |index |Index of string descriptor for this interface.




|+<big><big>DFU Functional Descriptor</big></big>Offset Field Size Value Descripton
|0 |bLength |1 |09h |Size of this descriptor,in bytes.
|1 |bDescriptorType |1 |21h |DFU FUNCTIONAL descriptor type.
|2 |bmAttributes |1 |Bit mask |DFU attributes<br />Bit 7……4: reserved<br />Bit 3: device will perform a bus detach-attach sequence when it receives a DFU_DETACH request. The host must not issue a USB Reset. (bitWillDetach)<br />0 = no<br />1 = yes<br />Bit 2: device is able to communicate via USB afeter Manifestation phase.(bitManifestationTolerant)<br />0 = no, must see bus reset<br />1 = yes<br />Bit1: upload capable(bitCanUpload)<br />0 = no<br />1 = yes<br />Bit0: download capable(bitCanDnload)<br />0 = no<br />1 = yes<br />
|3 |wDetachTimeOut |2 |Number |Time,in milliseconds, that the device will wait after receipt of the DFU_DETACH request. if this time elapses without a USB reaset, then the device will terminate the Reconfiguration phase and revert back to normal operation . This repreents the maximum time that the device can wait(depending on its timers, etc.).The host may specify a shorter timeout in the DFU_DETACH request.
|5 |wTransferSize |2 |Number |Maximum number of bytes that the device can accept per control-write transaction.
|7 |bcdDFUVersion |2 |BCD |Numeric expression identifying the version of the DFU Specification release.




|+<big><big>DFU Mode Interface Descriptor</big></big>Offset Field Size Value Descripton
|0 |bLength |1 |09h |Size of this descriptor,in bytes.
|1 |bDescriptorType |1 |04h |INTERFACE descriptor type.
|2 |bInterfaceNumber |1 |Number |Number of this interface.
|3 |bAlternateSetting |1 |00h |Alternate setting. Must be zero.
|4 |bNumEndpoints |1 |00h |Only the control pipe is used.
|5 |bInterfaceClass |1 |FEh |Application Specific Class Code.
|6 |bInterfaceSubClass |1 |01h |Device Firmware Upgrade Code.
|7 |bInterfaceProtocol |1 |02h |DFU mode protocol.
|8 |iInterface |1 |index |Index of string descriptor for this interface.


#### USB-DFU Product's USB Descriptor
[[USB-DFU Descriptor.png]]

#### DFU Updata Process Diagram
[[UpdataProcess.png]]

#### Judge Updating Program Or Application Program
	I used a updata flag which is a four bytes word and is writed at fixd flash address (0x8000 - 4)

	The flag's value is 0xAABBCCDD

	When the bootloader program run, first it judge the updata flag, if the updata falg is not equal 0xAABBCCDD, it will jump to application program.
	Otherwise it will run to updata program.

#### Jump To Application Program
	When we don't want to updata application program, the bootloader program should run to application program.

	In order to achieve this goal, we can add under code in your bootloader program.

	<font color="red">asm volatile("ldr r0, =0x4000");</font> <font color="blue">//"the 0x4000 is my application program's MSP point, you must change it adapt to your"</font>
	<font color="red">asm volatile("ldr r0, [[r0]]");</font>
	<font color="red">asm volatile("mov sp, r0");</font>
	
	<font color="red">asm volatile("ldr r0, =0x4004");</font> <font color="blue">//"the 0x4004 is my application program reset-function entry address, you must change it adapt to your"</font>
	<font color="red">asm volatile("ldr r0, [[r0]]");</font>
	<font color="red">asm volatile("mov pc, r0");</font>

#### Modify dfu-util For Ubuntu 14.04
	#Inside your home directory, download dfu-util

	git clone git://git.openezx.org/dfu-util.git

	open dfu-util/src/dfu_load.c

	add this instruction "[milli_sleep(200);](https://en.bitcoin.it/wiki/File:Milli_sleep%28200%29.png)" under line 134

	cd dfu-util

	./autogen.sh

	./configure

	make

	The resulting binary is dfu-util/src/dfu-util.

### Add DFU In AUC2 Firmware
#### Modify The AUC2 Firmware Flash And RAM Address
	1. We modify the Flash start address at 0x4000, because the bootloader's size is 0x4000.<br />
	2. We modify the RAM start address at 0x10000200, because we remap the NVIC table at the RAM 0x10000000,
	and the NVIC table size is 0x200 bytes.<br />
	3. We modify the *.ld file. And my *.ld file is avalon-usb-converter.ld, you can find your *.ld file.
> 

|<big>Before Modification</big>|<big>After  Modification</big>
|---|---
|MEMORY{	/* Define each memory region */	MFlash32 (rx) : ORIGIN = 0x0, LENGTH = 0x8000 	/* 32K bytes */	RamLoc4 (rwx) : ORIGIN = 0x10000000, LENGTH = 0x1000 /* 4K bytes */	RamUsb2 (rwx) : ORIGIN = 0x20004000, LENGTH = 0x800 /* 2K bytes */}	/* Define a symbol for the top of each memory region */	__top_MFlash32 = 0x0 + 0x8000;	__top_RamLoc4 = 0x1000000 + 0x1000;	__top_RamUsb2 = 0x20004000 + 0x800;|MEMORY{	/* Define each memory region */	MFlash32 (rx) : ORIGIN = 0x4000, LENGTH = 0x4000 	/* 16K bytes */	RamLoc4 (rwx) : ORIGIN = 0x10000200, LENGTH = 0xe00 /* 3.5K bytes */	RamUsb2 (rwx) : ORIGIN = 0x20004000, LENGTH = 0x800 /* 2K bytes */}	/* Define a symbol for the top of each memory region */	__top_MFlash32 = 0x4000 + 0x4000;	__top_RamLoc4 = 0x10000200 + 0xe00;	__top_RamUsb2 = 0x20004000 + 0x800;


#### Remap The NVIC Table
	1. Add Under Function Code In Your Program.

	/* copy the nvic table to ram */
	static void copy_nvic_to_ram(void)
	{
	volatile uint32_t *dst, size;
	volatile const uint32_t *src;<br />
	src = (volatile uint32_t *)APP_START_ADDR;//APP_START_ADDR Is The Application Program's Start Address. 
	dst = (volatile uint32_t *)RAM_START_ADDR;//RAM_START_ADDR Is The RAM Start Address.
	size = NVIC_TABLE_LEN >> 2;//NVIC_TABLE_LEN Is The NVIC Table's Size.
	do {
	*dst++ = *src++;
	} while (--size);<br />
	/* NVIC remap to RAM */
	Chip_SYSCTL_Map(0x01);<br />
	}

	2. Config The Register To Remap NVIC Table To RAM
>   [[!img "LPC11u14_NVIC_Table_Remap1.png" title="none " title="640px "]]
	<big><big>More See UM10462 LPC11U3x/2x/1x User manual,At The Page 22.</big></big>

### Issues
<big>1. About Bootloader USB Descriptor:</big>
	Note the DFU Functional Descriptor' wTransferSize size, It must equal the USBD_DFU_INIT_PARAM_T's wTransferSize.
<big>2. About IAP Transmission Data Size </big>
	The data size should be 256 or 512 or 1024 or 4096 Bytes.
<big>3. About IAP Transmission Data Address </big>
	The data address should be a 256 byte boundary.
<big>3. Why sometimes updata failed ?</big>
	Now, I didn't find the real reason. But, I think the reason is the time of communication is not correct. 
<big>3. Why sometimes updata finished, but the program don't run normally ?</big>
	I think that I didn't check the flash address and the data address are right.<br />
	I will add the check in the program later.

### References And Links

* [LPCXpress IDE Download](https://www.lpcware.com/lpcxpresso/download)
* [See More About DFU Protocol](http://www.usb.org/developers/docs/devclass_docs/DFU_1.1.pdf)
* [Source Code](https://github.com/Canaan-Creative/Avalon-USB-converter)
* [USBD ROM Stack](http://docs.lpcware.com/usbromlib/v1.0/)
* [LPC11U1X User Manual](http://www.nxp.com/documents/user_manual/UM10462.pdf)
* [LPCOpen sourcecode](http://www.lpcware.com/content/nxpfile/lpcopen-software-development-platform-lpc11xx-packages-0)
* [LPCOpen docs](http://docs.lpcware.com/lpcopen/v1.03/)
* [LPC11U14 Rev A Schematic](http://www.lpcware.com/system/files/LPCXpressoLPC11U14revA_0.pdf)
* [Errata sheet LPC11U1x](http://www.nxp.com/documents/errata_sheet/ES_LPC11U1X.pdf)
* [Using command line GDB](http://support.code-red-tech.com/CodeRedWiki/UsingGDB?highlight=%28LPC\-Link%29)

## TODO

1. Commit cgminer package for OpenWrt packages

### CGMiner

1. Support a new SmartSpeed way
1. Update local hash rate calculate method
1. Fix duplicate mm address
1. Support 5 or 6 mm running stably

### MM

1. Fix duplicate mm address

## Known Issues

1. MM can be upgrade by mismatch firmware.
1. local hashrate (GHS av) cann't match with the pool's hashrate
1. Use 5 or more modules in one AUC will cause MM idle periodically.
1. Duplicate MM address
1. AUC may be disappeared by unknown reason, then it can be detected again.

# FAQ
1. How to deal with the red blinking machine?
	   [[!img "A6_EC_PROC.png" size=640x640]]
2. How to boot the machine or hashboard unit safely?
	   [[!img "A6_BOOT.png" title="none " size=640x640]]
