[[!img "Bitcoin_Original_Client.png" size=120x120 size=350x350 class="right" title="The bitcoin original client"]]

The **Original Bitcoin client** is the first [[bitcoin]] client in the network's history. It is also the official client of the bitcoin project. It's available under the [MIT license](http://www.opensource.org/licenses/mit-license.php) for Windows, 32 and 64-bit GNU/Linux-based OSes and Mac OS X.

The client comes with two executables, a GUI and an command line interface (CLI).

## Executables
See [[running bitcoin|Running_Bitcoin]] for more detail and an example of the configuration file.
### Bitcoin (GUI)

The bitcoin GUI provides an easy to use wxWidgets-based interface. It allows to send coins and to monitor:

* transactions from and to the opened wallet
* block creations
* confirmations of transactions
* balance of the wallet

### Bitcoind (CLI)

Bitcoind is both a headless daemon and a client for the same daemon.  It also provides a JSON-RPC interface, allowing it to be controlled locally (via bitcoind or another CLI client) or remotely.  [[Various commands|Original_Bitcoin_client/API_Calls_list]] are made available by the API.

To use locally, first start the program in daemon mode:
> bitcoind -daemon


Then you can use the same program to execute [[API commands|Original_Bitcoin_client/API_Calls_list]], e.g.:
> bitcoind listreceivedbyaddress 0 true
> bitcoind getbalance

To stop the bitcoin daemon, execute:
> bitcoind stop

##History

* Version 0.3.24 was released for all supported platforms on July 8th, 2011  (5.1).
* Version 0.3.23 was released for all supported platforms on June 13th, 2011  (5.2).
* Version 0.3.22 was released for all supported platforms on May 19th, 2011  (5.3).
* Version 0.3.20 was released for all supported platforms on February 21st, 2011 (5.4).



##Theory of Operation

Satoshi's Original Bitcoin client is a multithreaded C++ program. It is designed to be portable across Windows, Mac, and Linux systems. The multithreaded aspect leads to some complexity and the use of certain code patterns to deal with concurrency that may be unfamiliar to many programmers. Also, the code is aggressive in the use of C++ constructs, so it will help to be fluent with map, multmap, set, string, vector, iostream, and templates. As typical of a C++ program, l a lot of code tends to end up in the header files so be sure to search both the .cpp and .h files when looking for a function.

The client is oriented around several major operations, which are described in separate detailed articles and summarized in the following sections.


###[[Initialization and Startup|Satoshi_Client_Initialization_and_Startup]]
Upon startup, the client performs various initilization routines including starting multiple threads to handle concurrent operations.

###[[Node Discovery|Satoshi_Client_Node_Discovery]]
The client uses various techniques find out about other bitcoin nodes that may exist.

###[[Node Connectivity|Satoshi_Client_Node_Connectivity]]
The client initiates and maintains connections to other nodes.

###[[Sockets and Messages|Satoshi_Client_Sockets_and_Messages]]
The client processes messages from other nodes and sends messages to other nodes using socket connections.

###[[Block Exchange|Satoshi_Client_Block_Exchange]]
Nodes advertise their inventory of blocks to each other and exchange blocks to build block chains.

###[[Transaction Exchange|Satoshi_Client_Transaction_Exchange]]
Nodes exchange and relay transactions with each other. The client associates transactions with bitcoin addresses in the local wallet.

###[[Wallet Services|Satoshi_Client_Wallet_Services]]
The client can create transactions using the local wallet. The client associates transactions with bitcoin addresses in the local wallet. The client provides a service for managing the local wallet.

###[[RPC Interface|Satoshi_Client_RPC_Interface]]
The client offers an JSON-RPC interface over HTTP over sockets to perform various operational functions and to manage the local wallet.

###User Interface
The user interface code is currently based on [wxWidgets](http://www.wxwidgets.org) and is scheduled to be superseded by [[Bitcoin-qt]] in version 0.5.0. 

##See Also

* [[Original_Bitcoin_client/API_calls_list]]
* [[Bitcoin network protocol|Protocol_specification]]
* [[Development_process]]
* [[Changelog]]

##External Links

* [Bitcoin Client project on SourceForge](http://sourceforge.net/projects/bitcoin/)
* [Bitcoin Client project on Github](https://github.com/bitcoin/bitcoin/)

##References

5.1: [Bitcoin version 0.3.24 released](http://forum.bitcoin.org/index.php?topic=27187.0)  
5.2: [Bitcoin version 0.3.23 released](http://forum.bitcoin.org/index.php?topic=16553.0)  
5.3: [Version 0.3.22](http://forum.bitcoin.org/index.php?topic=8894.0)  
5.4: [Version 0.3.20](http://www.bitcoin.org/smf/index.php?topic=3704.0)


[[!tag "Nodes"]]
[[!tag "Wallets"]]
[[!tag "User_Interfaces"]]
[[!tag "Clients"]]
[[!tag "Developer"]]
[[!tag "Technical"]]
[[!tag "Free_Software"]]
[[!tag "License/MIT-X11"]]
[[!tag "Open_Source"]]
