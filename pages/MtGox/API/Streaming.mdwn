Real time streaming data may be obtained over the streaming API, using [Socket.io](http://socket.io/) or the vanilla websocket

##websocket channel list

List of the public streaming channels :

https://mtgox.com/api/2/stream/list_public

##Connecting

* Host: **websocket.mtgox.com** or **socketio.mtgox.com**
* Port: **80** or **443** ( ssl )
* Namespace: **/mtgox** (Including beginning slash)

The following JavaScript code establishes a connection in the browser:
<source lang="javascript">
<script src="https://socketio.mtgox.com/socket.io/socket.io.js"></script>
<script>
	var conn = io.connect('https://socketio.mtgox.com/mtgox');
	conn.on('message', function(data) {
	// Handle incoming data object.
	});
</script>
</source>

##the Currency parameter
use : 
websocket.mtgox.com:80/mtgox?Currency=EUR

	and the websocket will give you updates in EUR currency

if you need need more than one currency, you can add currency symbols like that : 

websocket.mtgox.com:80/mtgox?Currency=EUR,USD

websocket.mtgox.com:80/mtgox?Currency=EUR,USD,CHF

find the list of currency symbols on https://en.bitcoin.it/wiki/MtGox/API#Currency_Symbols

The session ID expires after 30 seconds

##Handling Events
Socket.io exposes a simple interface for handling events. Handling <tt>message</tt> events is shown above, but there are other events that may be handled:
<source lang="javascript">
conn.on('connect',    onConnect);
conn.on('disconnect', onDisconnect);
conn.on('error',      onError);
conn.on('message',    onMessage);
</source>

##Incoming Data
Data arrives as a full object instead of as JSON text, eliminating the need to parse the data in the JavaScript handler. Messages that come across the socket to trigger the <tt>message</tt> event will contain the following minimum components:
<source lang="javascript">
{
	"op":<OPERATION_TYPE>
}
</source>

The <tt>OPERATION_TYPE</tt> field may take these values:

> 

|OPERATION_TYPE |Description
|---|---
|subscribe |Notification that the user is subscribed to a channel
|unsubscribe |Messages will no longer arrive over the channel
|remark |A server message, usually a warning
|private |The operation for depth, trade, and ticker messages
|result |The response for op:call operations


###op:subscribe and op:unsubscribe
The subscribe and unsubscribe message data are very simple, containing the channel and the operation.
<source lang="javascript">
{
	"channel":<CHANNEL_ID>,
	"op":"subscribe" OR "unsubscribe"
}
</source>

Some of the channels are:

> 

|Channel ID |Description
|---|---
|dbf1dee9-4f2e-4a08-8cb7-748919a71b21 |Trades
|d5f06780-30a8-4a48-a2f8-7ed181b4a13f |Ticker
|24e67e0d-1cad-4cc0-9e7a-f8523ef460fe |Depth


###op:remark
The remark operation contains message and success fields.
<source lang="javascript">
{
	"op":"remark",
	"message":<MESSAGE FROM THE SERVER>,
	"success":<boolean>
}
</source>

###op:private
The payloads of the <tt>op:private</tt> messages contain the real time market information. Each message follows this form:

<source lang="javascript">
{
	"channel":<CHANNEL_ID>,
	"op":"private",
	"private":<MESSAGE_TYPE>,
	<MESSAGE_TYPE>:<DATA_PAYLOAD>
}
</source>

The <tt>MESSAGE_TYPE</tt> field may take the values:

> 

|MESSAGE_TYPE |Description
|---|---
|ticker |Ticker messages
|trade |Trades, as they occur
|depth |Orders placed or removed
|result |The result of a websocket-encapsulated [[version 1 HTTP API|MtGox/API/HTTP/v1]]request


####Ticker
Ticker messages contain the current inside Bid and Ask as well as daily highs, lows, and volume. The fields contained in the ticker match those defined in the version 1.0 API above. All fields contain <tt>currency</tt>, <tt>display</tt>, <tt>value</tt>, and <tt>value_int</tt> entries.
<source lang="javascript">
{
	"channel":"d5f06780-30a8-4a48-a2f8-7ed181b4a13f",
	"op":"private",
	"origin":"broadcast",
	"private":"ticker",
	"ticker":{
	"avg":{
	"currency":"USD",
	"display":"$2.26847",
	"value":"2.26847",
	"value_int":"226847"
	},
	"buy":{...},
	"high":{...},
	"last":{..},
	"last_local":{...},
	"last_orig":{...},
	"low":{...},
	"sell":{...},
	"vol":{
	"currency":"BTC",
	"display":"118,696.02104208",
	"value":"118696.02104208",
	"value_int":"11869602104208"
	},
	"vwap":{...}
	}
}
</source>

####Trade
<source lang="javascript">{
	"channel":"dbf1dee9-4f2e-4a08-8cb7-748919a71b21",
	"op":"private",
	"origin":"broadcast",
	"private":"trade",
	"trade":{
	"amount":2.71,
	"amount_int":"271000000",
	"date":1310279340,
	"item":"BTC",
	"price":14.43,
	"price_currency":"USD",
	"price_int":"1443000",
	"primary":"Y",
	"properties":"limit, mixed_currency",
	"tid":"1310279340877902",
	"trade_type":"bid",
	"type":"trade"
	}
}
</source>

**trade** contains the following:

> 

|Name |Value
|---|---
|amount |the traded amount in item (BTC), float, deprecated
|amount_int |the traded amount * 1E8
|date |unix timestamp of trade
|item |What was this trade about
|price |price per unit, float, deprecated
|price_int |price in smallest unit as integer (5 decimals of USD, 3 in case of JPY)
|price_currency |currency in which trade was completed
|properties |"market": the trade ate the whole order, "limit": the trade ate the order partially - some of the original order still exists
|tid |Trade id (big integer, which is in fact trade timestamp in microseconds)
|trade_type |Did this trade result from the execution of a bid or a ask?



####Depth

Changes to the market depth data are broadcast so an up-to-date market depth can be kept by clients.

<source lang="javascript">{
	"channel":"24e67e0d-1cad-4cc0-9e7a-f8523ef460fe",
	"depth":{
	"currency":"USD",
	"item":"BTC",
	"now":"1323644358437819",
	"price":"14.43",
	"price_int":"1443000",
	"total_volume_int":"849766000",
	"type":1,
	"type_str":"ask",
	"volume":"-2.71",
	"volume_int":"-271000000"
	},
	"op":"private",
	"origin":"broadcast",
	"private":"depth"
}</source>

**depth** contains the following:

> 

|Name |Value
|---|---
|currency |the currency affected
|item |the item (BTC)
|price |price as a float, deprecated
|total_volume_int |total volume at this price, after applying the depth update, can be used as a starting point before applying subsequent updates.
|price_int |the price at which volume change happened (5 decimal for USD, 3 for JPY)
|type |1=ask, 2=bid. deprecated, use type_str
|type_str |type of order at this depth, either "ask" or "bid"
|volume |the volume change as float, deprecated
|volume_int |volume change * 1E8


### op:result

Output from [[HTTP API version 1|MtGox/API/HTTP/v1]] requests that were sent over the websocket.

<source lang="javascript">{
	"id":<REQUEST ID>,
	"op":"result",
	"result": {
	...
	}
}</source>

"result" contains the result of the call the same as if it were called over the HTTP API. <REQUEST ID> is the ID chosen by you when the request was sent.

### Private per-account messages

The streaming API provides a private channel for every user which receives updates for account-related activities like new orders being created. To subscribe, do:

<source lang="javascript">{
	"op":"mtgox.subscribe",
	"key":<PRIVATE_IDKEY>
}</source>

<PRIVATE_IDKEY> is obtained by sending a request to [[generic/private/idkey|MtGox/API/HTTP/v1#idKey]] in the version 1 API. Either over HTTP or through the websocket using [[op:call|#Authenticated_commands]].

#### user_order

user_order is sent when a the status of a user's order is changed.

<source lang="javascript">{
	"channel":  <USER CHANNEL GUID>
	"op": "private".
	"origin": "broadcast",
	"private": "user_order".
	"user_order": {
	"amount": {
	"currency": "BTC",
	"display": "1.00000000\U00a0BTC",
	"value": "1.00000000",
	"value_int": "100000000"
	},
	"currency": "USD",
	"date": "1330522328",
	"item": "BTC",
	"oid": <ORDER GUID>,
	"price": {
	"currency": "USD",
	"display": "$10.00000",
	"value": "10.00000",
	"value_int": "1000000",
	};
	"status": <ORDER STATUS>,
	"type": <ORDER TYPE>,
	};
}</source>



|Name |Value
|---|---
|USER CHANNEL GUID |GUID of private user channel
|ORDER GUID |GUID of order
|ORDER STATUS |New status of the order. Valid states are: pending, post-pending, open, executing, invalid, or stop.
|ORDER TYPE |bid or ask


When an order is cancelled, the "user_order" field only contains the "oid", and none of the other fields.

#### wallet

Updates to the user's wallet balance.

<source lang="javascript">{
	"channel": <USER CHANNEL GUID>,
	"op": "private",
	"origin": "broadcast",
	"private": "wallet",
	"wallet": {
	"op": <UPDATE SOURCE>,
	"amount": {
	...
	},
	"info": <UPDATE INFO>,
	"ref": <REFERENCE CODE>,
	"balance": {
	...
	}
	}
}</source>

"..." values above are normal 'amount' type dictionaries containing "currency", "value", "value_int", and "display".



|Name |Value
|---|---
|USER CHANNEL GUID |GUID of private user channel
|ORDER GUID |GUID of order
|UPDATE SOURCE |Cause of the balance update. Can be: in, out, earned, spent, withdraw, or deposit
|UPDATE INFO |Human readable string describing the update. Same string you see in the account history on mtgox.com
|REFERENCE CODE |Reference code for bank transfers. "null" if this isn't a bank transfer.


Description of the different source types:


|Source |Description
|---|---
|deposit  |Account deposits
|withdraw |Account withdrawals
|earned |Amount of USD gained from a trade
|spent |Amount of USD used for a trade
|in |Amount of BTC gained from a trade
|out |Amount of BTC used for a trade
|fee |MtGox fees


#### trade

Trades that happen on behalf of a user whose private channel you're subscribed to issue trade messages with the same format as the [[public trades channel|MtGox/API/Streaming#Trade]] does. If you're subscribed to both, be careful not to take both into account during calculations, it might cause some hard to track down issues

##  Outgoing commands
### Direct commands

Commands that can be sent without authentication

#### unsubscribe
Stop receiving messages from a channel

<source lang="javascript">{
	"op":"unsubscribe", 
	"channel":<CHANNEL ID>
}</source>

Responds with an identical message to confirm
#### mtgox.subscribe
Subscribe to a channel to start receiving messages from it.

<source lang="javascript">{
	"op": "mtgox.subscribe",
	"type": "ticker"
}</source>
"type" can be ticker, trades, or depth.

### Authenticated commands

These commands require an API key and secret pair to sign requests. Any of the [[HTTP API version 1|MtGox/API/HTTP/v1]] methods can be called. Responses are [[op:result|MtGox/API/Streaming#op:result]]

<source lang="javascript">{
	"op":"call",
	"id":<REQUEST ID>,
	"call":<BASE-64 ENCODED SIGNED REQUEST>,
	"context":"mtgox.com"
}</source>

<REQUEST ID> can be any string, it's used to identify the response as belonging to this request when an answer comes back. md5'ing your nonce is a good way to get an id. 

"call" must be a base-64 encoded string consisting of, in order: an API key, a signed copy of the request, and the request text itself.

The queries themselves look like:
<source lang="javascript">{
	"id":<REQUEST ID>,
	"call":<HTTP API ENDPOINT>,
	"nonce":<REQUEST NONCE>,
	"params":<REQUEST PARAMETERS>,
	"item":"BTC"
}</source>

<HTTP API ENDPOINT> is the last two path components of any version 1 API endpoint, for example [[private/info|#Private_info]], or [[public/cancelledtrades|#Cancelled_Trades]].

<REQUEST PARAMETERS> is optional for any request that doesn't have parameters.

The signing process is similar to the HTTP API, but because we can't send headers in an open websocket, the API key and signed request are simply prepended to the actual query data and base64 encoded. Reference implementations are available at https://github.com/MtGox/websocket

Here's a sample of how to create a valid request in PHP 5.3:
<source lang="php">$nonce = explode(' ', microtime(false));
$nonce = $nonce[[1]].substr($nonce[[0]], 2, 6);
$id = md5($nonce); // id can be anything to recognize this call
$query = array('call' => $call, 'params' => $params, 'item' => $item, 'currency' => $currency, 'id' => $id, 'nonce' => $nonce);
$query = json_encode($query);
// generate signature
$sign = hash_hmac('sha512', $query, base64_decode($apiSecret), true);
// prefix signature to query
$query = pack('H*', str_replace('-',*,$apiKey)).$sign.$query;
// send query
$call = array('op' => 'call', 'call' => base64_encode($query), 'id' => $id, 'context' => 'mtgox.com');
// $call can now be pushed out to the websocket</source>

## examples

### ticker
javascript, using hookio : 

http://www.youtube.com/watch?v=KD5ljtNK72U

http://github.com/hookio

http://github.com/cronopio/hook.io-mtgox

Another node.js project, using plain websockets (largely based on cronopio's work) :

https://github.com/dlanod/node-mtgox-websocket-client

A Java example:
https://github.com/timmolter/XChange

### arbitrage

* https://github.com/goteppo/ArBit
* https://github.com/vbmithr/breakbot

### websocket tools
https://github.com/cronopio/hook.io-ws

https://github.com/progrium/wssh
<source lang="bash">wssh websocket.mtgox.com:80/mtgox  grep depth 1>>depth.txt</source>

https://github.com/sta/websocket-sharp

https://bitbucket.org/pipe2grep/cryptocoinxchange

##See Also

* [[MtGox/API/HTTP/v1]]
* [MtGox API version 2: Unofficial Documentation](http://bitcointalk.org/index.php?topic=164404.0)

## References
<references></references>
