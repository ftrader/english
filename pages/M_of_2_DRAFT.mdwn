<pre>
  BIP: Unassigned
  Title: M-of-2 scriptPubKey
  Author: Ben Reeves <support@pi.uk.com>
  Status: Draft
  Type: Unassigned
  Created: 15-01-2012
</pre>

##Abstract

This BIP describes a new standard type of scriptPubKey designed to allow immediate use of split key wallets.

##Motivation

The purpose of this proposal is to provide split key wallet functionality without requiring changes to block validation rules or risking a fork in the blockchain.

##Specification

A new standard scriptPubKey will be defined:

	OP_2OVER OP_2OVER OP_ADD OP_ADD OP_ADD OP_RIPEMD160 <scriptHash> OP_EQUALVERIFY OP_CHECKMULTISIG

Redeemed by a new standard scriptSig

	OP_0  <sig> 1 [[pubkey]] [[pubkey]] 2

This proposal only supports A + B or A or B split key transactions.

##Use Cases

* Split key wallets

* Escrow Services - The author does not believe that (A + B) or C scripts are required for escrow transactions. Both parties must trust the holder of C anyway so that party can instead hold both A and B. The holders of A and B can either reach an agreement themselves or party C can act as the final arbitrator using A and B together.

##Example Execution



|Stack |Code
|---|---
||<sig>1 [[pubkey1]][[pubkey2]]2 OP_2OVER OP_2OVER OP_ADD OP_ADD OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 |OP_2OVER OP_2OVER OP_ADD OP_ADD OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 1 [[pubkey1]]|OP_2OVER OP_ADD OP_ADD OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 1 [[pubkey1]][[pubkey2]]2 |OP_ADD OP_ADD OP_ADD OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 1 [[pubkey1]]<sumA>|OP_ADD OP_ADD OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 1  <sumB>|OP_ADD  OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 <sumC>|OP_HASH160 <scriptHash>OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 <scriptHashA><scriptHash>|OP_EQUALVERIFY OP_CHECKMULTISIG
|<sig>1 [[pubkey1]][[pubkey2]]2 |OP_CHECKMULTISIG
|1 |


Where scriptHash must be constructed in the following manor:

scriptHash = HASH160(M + pubKey2 + pubKey1 + N);

(+ means addition not concatenation)

##Security

Although it may appear insecure totalling the sum of the public keys the author does not believe this to be the case. Because the resulting sum is hashed using HASH160 the target value cannot be deduced.

<pre>
uint256 targetScriptHash = HASH160(); 
uint256 myKeyA = SHA256();
uint256 myBogusKeyB = 0;
</pre>

Initially it might seem that you could use a A or B where B is a invalid key:
	
<pre>
while(myKeyA + myBogusKeyB != targetScriptHash) {
  ++myBogusKeyB;
}</pre>

However you actually must additionally hash the sum of myKeyA + myBogusKeyB

<pre>
while(HASH160(myKeyA + myBogusKeyB) != targetScriptHash) {
  ++myBogusKeyB;
}</pre>

What does affect security is ability to adjust M (either 1 or 2) without needing to generate a new SHA256 pair. This effectively halves the key space to 2^255 keys however it is still far far out of the realm of brute force possibility. Regardless use of a 20 byte hash limits the key space size to 2^160 so it actually has no effect on security at all.

##Rationale

This BIP replaces BIP 16, ("/P2SH/").

There is a general consensus that multi signature transactions need to be implemented ASAP without requiring the use extremely long "script addresses". A number of potential issues have been found with the solutions thus far:

* CHV requires the scriptPubKey interacts with data from scriptSig which has not been push onto the stack
* OP_EVAL essentially makes the scripting language turing complete, something which Satoshi deliberately avoided during its design. 
* P2SH requires that standard templates become a mandatory part of the scripting language, meaning they can never be fully depreciated in future.

All of the these solutions risk a fork in the blockchain and require at least 50% miners approval. This proposal requires no changes to the block validation rules and can be implemented immediately. However it only allows for the most common use cases of pay to script transactions and has limited flexibility. Additionally the resulting scriptPubKey is 4 bytes larger than the standard "pay to address" scriptPubKey in common use.

One additional advantage of this proposal is that the order of public keys in a scriptSig does not affect the resulting hash. Therefore a user redeeming such a transaction does not need to know the exact script just each public key and whether the transaction is (A or B) or (A + B).

##Backwards Compatibility

Old clients will not relay transactions using the new template, however they will preform the same validation as new clients.

## M-of-3

The following is not part of the specification for this proposal but it is worth mentioning that using the same technique you can support both M-of-2 and M-of-3 transactions.

	3 OP_EQUAL OP_IF OP_DROP OP_ENDIF OP_2OVER OP_2OVER OP_ADD OP_ADD OP_ADD OP_RIPEMD160 <scriptHash> OP_EQUALVERIFY OP_CHECKMULTISIG

However this requires 8 bytes of additional op codes.

##See Also

* https://bitcointalk.org/index.php?topic=46538
* The [[Address format for Pay to Script Hash BIP|BIP_0013]]
* M-of-N Multisignature Transactions [[BIP 11|BIP_0011]]
