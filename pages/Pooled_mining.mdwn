**Pooled mining** is an approach where multiple generating clients contribute to the generation of a block, and then split the block reward according the contributed processing power. Pooled mining effectively reduces the granularity of the block generation reward, spreading it out more smoothly over time.

##Introduction

With increasing generation difficulty, mining with lower-performance devices can take a very long time before block generation, on average. For example, with a mining speed of 1000 Khps, at a difficulty of 14484 (which was in effect at the end of December, 2010), the average time to generate a block is almost 2 years. 

To provide a more smooth incentive to lower-performance miners, several pooled miners, using different approaches, have been created. With a mining pool, a lot of different people contribute to generating a block, and the reward is then split among them according to their processing contribution. This way, instead of waiting for years to generate 50btc in a block, a smaller miner may get a fraction of a bitcoin on a more regular basis.

A **share** is awarded by the mining pool to the clients who present a valid [[proof_of_work]] of the same type as the proof of work that is used for creating [[blocks|block]], but of lesser complexity, so that it requires less time on average to generate.

##Pooled mining approaches

The problem with pooled mining is that steps must be taken to prevent cheating by the clients and the server. Currently there are two different approaches used.

###The slush approach

[[Bitcoin_Pooled_Mining]] (BPM), sometimes referred to as "slush's pool", follows a score-based method.  Older shares (from beginning of the round) has lower weight than newer shares, which demotivate cheater from switching between pools inside one round.

###The puddinpop approach

(As of February, 2011, there are no puddinpop pools running.)

Another approach is the 'metahash' technique, used by puddinpop's [[remote_miner]]. Clients generate hashes, and also submit 'metahashes', which are hashes of a large chunk of generated hashes. The server checks that the metahashes are correct (in a round-robin fashion, picking up a metahash from a client that hasn't been checked on the longest), thus preventing clients from simply claiming that they have done work without actually doing the work. The withholding of good blocks by the clients is prevented via the server being in possession of the private key, just as in the previous approach. Rewards are distributed based on the number of metahashes submitted by the clients.

Cheating by the server, by way of the pool operator fraudulently granting himself extra shares, is also not addressed, requiring the clients to trust the operator.

The generated blocks contain multiple keys in the generation transaction, giving fractional bitcoin amounts to each key, in proportion to their hashing contribution for that block.

###BitPenny

The [[BitPenny]] approach is to offer an instant, flat payout for each share that is solved.  The payout is offered from the pool's existing balance and can therefore be withdrawn immediately, without waiting for a block to be solved or confirmed.  The possibility of cheating by the pool operator and by timing attacks is thus completely eliminated. 

This method results in the least possible variance for miners while transferring all risk to the pool operator.  The resulting possibility of loss for the server is offset by setting the payout lower than the full expected value.

###DeepBit

[[DeepBit]] offers both a proportional reward distribution as well as a fixed-rate pay-per-share mode.

###BTCMine

[[BTCMine]] offers a score-based payout method. All valid shares from current round accepted.

###Bitcoin Pool

[[Bitcoin_Pool]] offers shared block payouts.  Only shares from the current block in the current round are accepted.

###Comparison

The slush approach uses a lot fewer resources on the pool server, since rather than continuously checking metahashes, all that has to be checked is the validity of submitted shares. The number of shares sent can be adjusted by adjusting the artificial difficulty level.

Further, the slush approach allows the clients to use existing miners without any modification, while the puddinpop approach requires the custom pool miner, which are as of now not as efficient on GPU mining as the existing GPU miners.
[[!img "Smallgeneration.png" size=120x120 title="Puddinpop miners receive coins directly."]]

Additionally, the puddinpop approach of distributing the earnings by way of including precise sub-cent amounts in the generation transaction for the participants, results in the presence of sub-cent bitcoin amounts in your wallet, which are likely to disappear later due to bugs in all current (as of February 2011) bitcoin nodes. (E.g., if you have a transaction with 0.052 in your wallet, and you later send .05 to someone, your .002 will disappear.).

Puddinpop miners receive coins directly, which eliminates the delay in receiving earnings that is required on slush's server. However, bitcoind is incapable of detecting generation transactions, so earnings sent directly to MyBitcoin, MtGox, etc. will disappear.

This all seems to point to the slush approach being the better one. Its only downside is that the server software is not open source, while the puddinpop software is.

##See Also

* [[Miners|tags/Miners]]
* [[Pool Operators|tags/Pool_Operators]]
* [[Why_a_GPU_mines_faster_than_a_CPU]]
* [[Why_pooled_mining]]

##External links

* [slush's mining pool](http://mining.bitcoin.cz)
* [puddinpop's mining pool thread](http://www.bitcoin.org/smf/index.php?topic=1458.0)
* [BitPenny website](http://www.bitpenny.com) [forum thread](http://www.bitcoin.org/smf/index.php?topic=3266.0) [IRC Channel](http://webchat.freenode.net/?channels=bitcoin-bitpenny)

##References



[[!tag "Mining"]]
