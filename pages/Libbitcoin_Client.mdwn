The [libbitcoin-client](https://github.com/libbitcoin/libbitcoin-client) library provides an abstraction over the low level networking calls required to communicate with [[libbitcoin-server (BS)|Libbitcoin_Server]]. The server application is currently monolithic (not divided into library and executable) so there is no analog to the libbitcoin-client API for a server.

##Example
	#include <iostream>
	#include <czmq++/czmqpp.hpp>
	#include <bitcoin/client.hpp>
	
	int main(int argc, char* argv[])
	{
	czmqpp::context context;
	czmqpp::socket socket(context, ZMQ_DEALER);
	
	if (argc < 2  socket.connect(argv[[1]]) < 0)
	{
	std::cerr << "server argument required" << std::endl;
	return 1;
	}
	
	auto stream = std::make_shared<bc::client::socket_stream>(socket);
	auto message = std::static_pointer_cast<bc::client::message_stream>(stream);
	auto obelisk = std::make_shared<bc::client::obelisk_codec>(message);
	
	const auto error_handler = [](const std::error_code& code)
	{
	std::cout << "error: " << code.message() << std::endl;
	};
	
	const auto handler = [](size_t height)
	{
	std::cout << "height: " << height << std::endl;
	};
	
	obelisk->fetch_last_height(error_handler, handler);
	
	while (obelisk->outstanding_call_count())
	{
	czmqpp::poller poller;
	poller.add(socket);
	
	const auto delay = static_cast<int>(obelisk->wakeup().count());
	if (!delay)
	break;
	
	poller.wait(delay);
	if (poller.terminated())
	break;
	
	if (!poller.expired())
	stream->signal_response(obelisk);
	}
	
	return 0;
	}

##Messaging
The client-server protocol (API) is build on [ØMQ](http://zeromq.org) (aka ZMQ, ZeroMQ and Zero Message Queue), a "High-speed asynchronous I/O engine, in a tiny library." (3.1) ØMQ sits directly on sockets and, "Carries messages across inproc, IPC, TCP, TIPC, multicast." (3.2) The API supports the pub-sub pattern (3.3) (e.g. monitoring Bitcoin addresses) and the router-dealer pattern (3.4) (e.g. requesting stealth transactions).

##Authentication and Encryption
The API incorporates CurveZMQ, "An authentication and encryption protocol for ZeroMQ." (4.1) (4.2) CurveZMQ is based on [CurveCP](http://curvecp.org) and [NaCl](http://nacl.cr.yp.to), providing fast, secure elliptic-curve crypto. (4.3)

Private key certificates are self-generated as ZPL encoded files (4.4) with public and secret key properties. The keys are Z85 encoded (4.5) elliptic curve points. Keys can be fabricated by Bitcoin Explorer (BX) (4.6) as follows.

	$ bx cert-new citizen4.private

	$ cat citizen4.private
	#   ****  Generated on 2015-05-18 15:09:59 by CZMQ  ****
	#   ZeroMQ CURVE **Secret** Certificate
	#   DO NOT PROVIDE THIS FILE TO OTHER USERS nor change its permissions.
	
	metadata
	curve
	public-key = "Mu^Lc6Y(ebQAzQRGl^XkZKXMpb+<pnVDZcd:WSv"
	secret-key = "dCSl9<(u#4L4$(6>CqJ@NX-kvo+I5^&WPHDX+"

Client applications can be configured with the public key of one or more servers (4.7) and thereby securely authenticate the server that is configured with the corresponding private key certificate (4.8). A client with a server's public key may also create a secure channel with the server.

Client applications may be configured with a self-generated private key (4.9) and thereby securely authenticate to a server that holds a copy of that that client's public key (4.10).

##History
The libbitcoin client-server protocol (API) is sometimes referred to as the Obelisk protocol, as this was the name of the first version of the server. In the first version the client API was contained within the libbitcoin-server library, which led to a dependency between client applications such as [[Bitcoin Explorer (BX)|Libbitcoin_Explorer]], and the server library.

In the summer of 2014 William Swanson redesigned the client library as libbitcoin-client. The first release of the independent library shipped as version 2.0 coincident with Bitcoin Explorer 2.0. This was a client to Obelisk, the original server application. As Obelisk was upgraded to Bitcoin Server (version 2.0) the client (version 2.1) was adapted to minor corresponding changes in the client-server API. With few exceptions (fetch-stealth and watch-address), the client is compatible with both Obelisk and Bitcoin Server.

##Dependencies

* [[libbitcoin|Libbitcoin_Common]]
* [secp256k1](https://github.com/bitcoin/secp256k1)
* [sodium](https://github.com/jedisct1/libsodium)
* [zmq](https://github.com/zeromq/libzmq)
* [czmq](https://github.com/zeromq/czmq)
* [czmqpp](https://github.com/zeromq/czmqpp)

##See Also

* [[Libbitcoin]]

##References
3.1: [ØMQ - Code Connected](http://zeromq.org)  
3.2: [ØMQ - Code Connected](http://zeromq.org)  
3.3: [ØMQ - Getting the Message Out](http://zguide.zeromq.org/page:all#Getting-the-Message-Out)  
3.4: [ØMQ - Advanced Request-Reply Patterns](http://zguide.zeromq.org/php:chapter3#The-DEALER-to-ROUTER-Combination)  
4.1: [CurveZMQ - Security for ZeroMQ](http://curvezmq.org)  
4.2: [CurveZMQ Authentication and Encryption Protoco](http://rfc.zeromq.org/spec:26)  
4.3: ["The security impact of a new cryptographic library" - Daniel J. Bernstein et. al.](http://cr.yp.to/highspeed/coolnacl-20120725.pdf)  
4.4: [ZPL - ZeroMQ Property Language](http://rfc.zeromq.org/spec:4)  
4.5: [Z85 - ZeroMQ Base-85 Encoding Algorithm](http://rfc.zeromq.org/spec:32)  
4.6: [Bitcoin Explorer cert-new command.](https://github.com/libbitcoin/libbitcoin-explorer/wiki/bx-cert-new)  
4.7: [BX Configuration Settings](https://github.com/libbitcoin/libbitcoin-explorer/wiki/Configuration-Settings#default-configuration-settings)  
4.8: [BS Configuration Settings](https://github.com/libbitcoin/libbitcoin-server/wiki/Configuration-Settings#configuration-settings)  
4.9: [BX Configuration Settings](https://github.com/libbitcoin/libbitcoin-explorer/wiki/Configuration-Settings#default-configuration-settings)  
4.10: [BS Configuration Settings](https://github.com/libbitcoin/libbitcoin-server/wiki/Configuration-Settings#configuration-settings)
