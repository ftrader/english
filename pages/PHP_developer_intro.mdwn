**L**inux **A**pache **M**ySQL **P**HP + Bitcoin tutorial.

For the sake of this tutorial we assume an Ubuntu server running with PHP. The use case here is integrating a shopping system to accept Bitcoins. We assume some knowledge of Bitcoin and experience in PHP.

You can substitute any other language here for PHP. See the associated [[API reference|API_reference_(JSON-RPC)]] pages for info on other languages.

You will run Bitcoin in daemon mode. The way PHP communicates is through localhost HTTP requests. You use a library called [JSON-RPC](http://jsonrpcphp.org/) to call the various functions. It will respond back with a [JSON object](http://en.wikipedia.org/wiki/Json).

## Setting up Bitcoin

You need the bitcoind command-line daemon.  You can either compile it from source or download a binary from the bitcoin.org homepage.

See [[Running_Bitcoin]] for details on configuring bitcoin.

Before running bitcoind you will need to create a file in the bitcoin data directory (~/.bitcoin/.bitcoin.conf on Linux):
<source lang="bash">
rpcuser=user
rpcpassword={you MUST pick a unique password to be secure}
</source>

Now run bitcoind:
<source lang="bash">
$ ./bitcoind

1. wait a few seconds for it to start up
$ ./bitcoind getinfo

1. various info shown
$ ./bitcoind help

1. help on commands
</source>

Bitcoin is now initialising and you must wait until "blocks" is at the [current count](http://bitcoinwatch.com/).

## First steps

Assuming Bitcoin has finished the initialisation process; download the file jsonRPCClient.php from [JSON-RPC PHP](http://jsonrpcphp.org/). The other files can be safely discarded.

<source lang="php">
	require_once 'jsonRPCClient.php';
	
	$bitcoin = new jsonRPCClient('http://user:password@127.0.0.1:8332/');
	
	echo "<pre>\n";
  print_r($bitcoin->getinfo());
  echo "</pre>";
</source>

## Precision

Because PHP has no option to JSON decode to accurate decimal class, you should internally use GMP. Treat each number like a large int with 8 decimal places (this can be trimmed for display).

Our version of Bitcoin treats every monetary value as int64 8 decimal strings. So 1 BTC will be "100000000". Use PHP's GMP functions to manipulate these values accurately.

For converting between internal GMP numbers and display/user input, you can use these functions:
<source lang="php">

1. converts a user supplied number to our internal representation
1. 3.14 => "314000000"
1. accepts strings, floats and ints as input
function numstr_to_internal($numstr)
{
	return bcmul($numstr, pow(10, 8), 0);
}

1. converts an internal number to an end user number for display as defined by precision
1. 314100000 => "3.14"
1. accepts GMP numbers, ints and strings as input
function internal_to_numstr($num, $precision=2)
{
	$repr = gmp_strval($num);
	$repr = bcdiv($repr, pow(10, 8), $precision);
	# now tidy output...
	# trim trailing 0s
	$repr = rtrim($repr, '0');
	# and a trailing . if it exists
	$repr = rtrim($repr, '.');
	return $repr;
}

$num_internal = numstr_to_internal("3.141");
echo "<p>".$num_internal."</p>";
$num_display = internal_to_numstr($num_internal);
echo "<p>".$num_display."</p>";
</source>

If you need to do a decimal division in GMP, then GMP only supports integer division + a remainder ([gmp_div_qr](http://php.net/manual/en/function.gmp-div-qr.php)). The work-around for this, is to use the bcmath module:
<source lang="php">
$a = gmp_init("100");
$b = gmp_init("3");
echo "<p>".bcdiv(gmp_strval($a), gmp_strval($b), 3)."</p>";
</source>

Note that bcdiv uses strings.

See also: [GMP](http://php.net/manual/en/ref.gmp.php) and [BC Math](http://php.net/manual/en/ref.bc.php) manuals.

## Accounts

In Bitcoin, money is sent to addresses. Your balance is the total of all the money in all the address in your wallet.

Bitcoin goes another step. You can have accounts. Each account holds multiple addresses and adds like a mini-Bitcoin.

<source lang="bash">
$ ./bitcoind listaccounts

1. show list of accounts and various info for each one
$ ./bitcoind getaccountaddress user889

1. get an address to receive money to that is unique for the account user889
$ ./bitcoind getbalance user889

1. get the sum of all the money in the addresses owned by the account user889
</source>

In your shopping system, each user should have a unique username. You then query bitcoin for a unique address using $bitcoin->getaccountaddress("user889"); [the first address for user889](gets) or $bitcoin->getnewaddress("user889"); [a new address for user889](creates).

The customer then deposits to this address.

You can check the funds for that customer by doing $bitcoin->getbalance("user889", 4);. The 4 indicates the minimum number of confirmations we will accept before assuming this payment is valid.

### getnewaddress vs getaccountaddress

Using getnewaddress helps increase the anonymity of your customers by making it hard to track their payments from the POV of a malicious agent. However running it too often will cause your wallet to become filled with many empty addresses.

I recommend that you run do something like:
<source lang="php">
<?php
	require_once('jsonRPCClient.php');
	$bitcoin = new jsonRPCClient('http://root:root@127.0.0.1:8332/'); 
	# now check for appropriate funds in user account
	try {
	$username = ...
	if(isset($_SESSION[['sendaddress']]))
	$sendaddress = $_SESSION[['sendaddress']];
	else {
	$sendaddress = $bitcoin->getnewaddress($username);
	$_SESSION[['sendaddress']] = $sendaddress;
	}
	$balance = $bitcoin->getbalance($username);
	}
	catch (Exception $e) {
	die("<p>Server error! Please contact the admin.</p>");
	}
?>
</source>

This creates a new address at the beginning of every new session, and stores it in the session variable.

[[!tag "Developer"]]
