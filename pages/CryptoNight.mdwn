CryptoNight is the proof-of-work algorithm used in [[CryptoNote]] and [[Bytecoin (BCN)|Bytecoin]]. It is designed to be egalitarian, being suitable for ordinary PC CPUs, but not the special purpose devices for mining. Therefore, the currencies based on CryptoNight are CPU-mined only.

## Principles

CryptoNight relies on random access to the slow memory and emphasizes latency dependence. Each new block depends on all the previous blocks (unlike, for example, [[scrypt|scrypt_proof_of_work]]). The algorithm requires about 2 Mb per instance:

1. It fits in the L3 cache (per core) of modern processors.
1. A megabyte of internal memory is almost unacceptable for the modern ASICs.
1. GPUs may run hundreds of concurrent instances, but they are limited in other ways. GDDR5 memory is slower than the CPU L3 cache and remarkable for its bandwidth, not random access speed.
1. Significant expansion of the scratchpad would require an increase in iterations, which in turn implies an overall time increase. "Heavy" calls in a trustless p2p network may lead to serious vulnerabilities, because nodes are obliged to check every new block's proof-of-work. If a node spends a considerable amount of time on each hash evaluation, it can be easily DDoSed by a flood of fake objects with arbitrary work data (nonce values).

CryptoNote was created with the state-of-the-art cryptography with sufficient security level for the next decades. Schnorr signatures and 256-bit ECC keys (the basis for EdDSA) are very strong cryptos, which have passed the test of times. It has been implemented in various systems (not only ours). There have been tons of papers with analysis and researches on that top. I can't say the same applies to pairing-based cryptography or NTRU.
## See Also

* [[Bytecoin]]
* [[CryptoNote]]

## External Links

* [CryptoNight on CryptoNote's website](https://cryptonote.org/inside.php#equal-proof-of-work)


[[!tag "Alternative_cryptocurrencies"]]
[[!tag "Digital_currencies"]]
[[!tag "Technical"]]
